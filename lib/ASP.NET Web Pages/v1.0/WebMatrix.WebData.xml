<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WebMatrix.WebData</name>
  </assembly>
  <members>
    <member name="T:WebMatrix.WebData.ExtendedMembershipProvider"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.#ctor"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.ConfirmAccount(System.String)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.CreateAccount(System.String,System.String)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.CreateAccount(System.String,System.String,System.Boolean)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.CreateUserAndAccount(System.String,System.String)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.CreateUserAndAccount(System.String,System.String,System.Boolean)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.CreateUserAndAccount(System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.CreateUserAndAccount(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.DeleteAccount(System.String)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.GeneratePasswordResetToken(System.String)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.GeneratePasswordResetToken(System.String,System.Int32)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.GetCreateDate(System.String)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.GetLastPasswordFailureDate(System.String)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.GetPasswordChangedDate(System.String)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.GetPasswordFailuresSinceLastSuccess(System.String)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.GetUserIdFromPasswordResetToken(System.String)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.IsConfirmed(System.String)"></member>
    <member name="M:WebMatrix.WebData.ExtendedMembershipProvider.ResetPasswordWithToken(System.String,System.String)"></member>
    <member name="T:WebMatrix.WebData.FormsAuthenticationSettings"></member>
    <member name="F:WebMatrix.WebData.FormsAuthenticationSettings.DefaultLoginUrl"></member>
    <member name="F:WebMatrix.WebData.FormsAuthenticationSettings.LoginUrlKey"></member>
    <member name="T:WebMatrix.WebData.PreApplicationStartCode"></member>
    <member name="M:WebMatrix.WebData.PreApplicationStartCode.Start"></member>
    <member name="T:WebMatrix.WebData.SimpleMembershipProvider"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.#ctor"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.#ctor(System.Web.Security.MembershipProvider)"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.ApplicationName"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.ChangePassword(System.String,System.String,System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.ConfirmAccount(System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.CreateAccount(System.String,System.String,System.Boolean)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.CreateUserAndAccount(System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.DeleteAccount(System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.DeleteUser(System.String,System.Boolean)"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.EnablePasswordReset"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.EnablePasswordRetrieval"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.GeneratePasswordResetToken(System.String,System.Int32)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.GetCreateDate(System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.GetLastPasswordFailureDate(System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.GetNumberOfUsersOnline"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.GetPassword(System.String,System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.GetPasswordChangedDate(System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.GetPasswordFailuresSinceLastSuccess(System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.GetUser(System.Object,System.Boolean)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.GetUser(System.String,System.Boolean)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.GetUserId(System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.GetUserIdFromPasswordResetToken(System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.GetUserNameByEmail(System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.IsConfirmed(System.String)"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.MaxInvalidPasswordAttempts"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.MinRequiredNonAlphanumericCharacters"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.MinRequiredPasswordLength"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.PasswordAttemptWindow"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.PasswordFormat"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.PasswordStrengthRegularExpression"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.RequiresQuestionAndAnswer"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.RequiresUniqueEmail"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.ResetPassword(System.String,System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.ResetPasswordWithToken(System.String,System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.UnlockUser(System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.UpdateUser(System.Web.Security.MembershipUser)"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.UserIdColumn"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.UserNameColumn"></member>
    <member name="P:WebMatrix.WebData.SimpleMembershipProvider.UserTableName"></member>
    <member name="M:WebMatrix.WebData.SimpleMembershipProvider.ValidateUser(System.String,System.String)"></member>
    <member name="T:WebMatrix.WebData.SimpleRoleProvider">
      <summary>Provides basic role-management methods.</summary>
    </member>
    <member name="M:WebMatrix.WebData.SimpleRoleProvider.#ctor"></member>
    <member name="M:WebMatrix.WebData.SimpleRoleProvider.#ctor(System.Web.Security.RoleProvider)"></member>
    <member name="M:WebMatrix.WebData.SimpleRoleProvider.AddUsersToRoles(System.String[],System.String[])">
      <summary>Adds the specified user names to the specified roles.</summary>
      <param name="usernames">The user names to add.</param>
      <param name="roleNames">The roles to add the names to.</param>
    </member>
    <member name="P:WebMatrix.WebData.SimpleRoleProvider.ApplicationName"></member>
    <member name="M:WebMatrix.WebData.SimpleRoleProvider.CreateRole(System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleRoleProvider.DeleteRole(System.String,System.Boolean)"></member>
    <member name="M:WebMatrix.WebData.SimpleRoleProvider.FindUsersInRole(System.String,System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleRoleProvider.GetAllRoles"></member>
    <member name="M:WebMatrix.WebData.SimpleRoleProvider.GetRolesForUser(System.String)"></member>
    <member name="M:WebMatrix.WebData.SimpleRoleProvider.GetUsersInRole(System.String)">
      <summary>Returns the user names that are associated with the specified role.</summary>
      <returns>The user names for the role.</returns>
      <param name="roleName">The name of the role.</param>
    </member>
    <member name="M:WebMatrix.WebData.SimpleRoleProvider.IsUserInRole(System.String,System.String)">
      <summary>Returns a value that indicates whether a specified user is in a specified role.</summary>
      <returns>true if the user is in the role; otherwise, false. </returns>
      <param name="username">The user name.</param>
      <param name="roleName">The name of the role.</param>
    </member>
    <member name="M:WebMatrix.WebData.SimpleRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])"></member>
    <member name="M:WebMatrix.WebData.SimpleRoleProvider.RoleExists(System.String)">
      <summary>Returns a value that indicates whether a specified role exists.</summary>
      <returns>true if the role exists; otherwise, false.</returns>
      <param name="roleName">The name of the role.</param>
    </member>
    <member name="P:WebMatrix.WebData.SimpleRoleProvider.UserIdColumn"></member>
    <member name="P:WebMatrix.WebData.SimpleRoleProvider.UserNameColumn"></member>
    <member name="P:WebMatrix.WebData.SimpleRoleProvider.UserTableName"></member>
    <member name="T:WebMatrix.WebData.WebSecurity">
      <summary>Provides security and authentication features for ASP.NET Razor pages.</summary>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.ChangePassword(System.String,System.String,System.String)">
      <summary>Changes the password for the specified user.</summary>
      <returns>true if the password is successfully changed; otherwise, false.</returns>
      <param name="userName">The user name.</param>
      <param name="currentPassword">The current password for the user.</param>
      <param name="newPassword">The new password.</param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.ConfirmAccount(System.String)">
      <summary>Gets a value that indicates whether an account has been confirmed as a valid account with the provider.</summary>
      <returns>true if the account is confirmed; otherwise, false.</returns>
      <param name="accountConfirmationToken">A confirmation message to pass to the authentication provider.</param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.CreateAccount(System.String,System.String,System.Boolean)">
      <summary>Creates a new user account with the specified user name and password.</summary>
      <returns>A token from the provider that created the account.</returns>
      <param name="userName">The user name.</param>
      <param name="password">The password for the user.</param>
      <param name="requireConfirmationToken">(Optional) true to specify that the account must be confirmed; otherwise, false. The default is false. </param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.CreateUserAndAccount(System.String,System.String,System.Object,System.Boolean)">
      <summary>Creates a new user and a new user account.</summary>
      <returns>A token from the provider that created the user and the account.</returns>
      <param name="userName">The user name.</param>
      <param name="password">The password for the user.</param>
      <param name="propertyValues">(Optional) A dictionary that contains additional user attributes. The default is null.</param>
      <param name="requireConfirmationToken">(Optional) true to specify that the account must be confirmed; otherwise, false. The default is false.</param>
    </member>
    <member name="P:WebMatrix.WebData.WebSecurity.CurrentUserId">
      <summary>Gets the ID for the current user.</summary>
      <returns>The ID for the current user.</returns>
    </member>
    <member name="P:WebMatrix.WebData.WebSecurity.CurrentUserName">
      <summary>Gets the user name for the current user.</summary>
      <returns>The name of the current user.</returns>
    </member>
    <member name="F:WebMatrix.WebData.WebSecurity.EnableSimpleMembershipKey"></member>
    <member name="M:WebMatrix.WebData.WebSecurity.GeneratePasswordResetToken(System.String,System.Int32)">
      <summary>Generates a password reset token that can be sent a user in email.</summary>
      <returns>A token from the provider to send to the user.</returns>
      <param name="userName">The user name.</param>
      <param name="tokenExpirationInMinutesFromNow">(Optional) The time in minutes until the password reset token expires. The default is 1440 (24 hours).</param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.GetCreateDate(System.String)"></member>
    <member name="M:WebMatrix.WebData.WebSecurity.GetLastPasswordFailureDate(System.String)"></member>
    <member name="M:WebMatrix.WebData.WebSecurity.GetPasswordChangedDate(System.String)"></member>
    <member name="M:WebMatrix.WebData.WebSecurity.GetPasswordFailuresSinceLastSuccess(System.String)"></member>
    <member name="M:WebMatrix.WebData.WebSecurity.GetUserId(System.String)">
      <summary>Gets the ID for a user based on the user name.</summary>
      <returns>The ID of the logged-in user.</returns>
      <param name="userName">The user name.</param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.GetUserIdFromPasswordResetToken(System.String)"></member>
    <member name="P:WebMatrix.WebData.WebSecurity.HasUserId"></member>
    <member name="M:WebMatrix.WebData.WebSecurity.InitializeDatabaseConnection(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Connects to a database that contains user information.</summary>
      <param name="connectionStringName">The name of the connection string.</param>
      <param name="userTableName">The name of the database table that contains user information.</param>
      <param name="userIdColumn">The name of the database column that contains user IDs.</param>
      <param name="userNameColumn">The name of the database column that contains user names.</param>
      <param name="autoCreateTables">true to indicate that tables should be created automatically; false to indicate that tables should not be created automatically.</param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.InitializeDatabaseConnection(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Connects to a database that contains user information using the specified membership or role provider.</summary>
      <param name="connectionString">The name of the connection string.</param>
      <param name="providerName">The name of the membership provider or role provider.</param>
      <param name="userTableName">The name of the database table that contains user information.</param>
      <param name="userIdColumn">The field that contains user identifier numbers.</param>
      <param name="userNameColumn">The field that contains user names.</param>
      <param name="autoCreateTables">true to indicate that tables should be created automatically; false to indicate that tables should not be created automatically.</param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.IsAccountLockedOut(System.String,System.Int32,System.Int32)"></member>
    <member name="M:WebMatrix.WebData.WebSecurity.IsAccountLockedOut(System.String,System.Int32,System.TimeSpan)"></member>
    <member name="P:WebMatrix.WebData.WebSecurity.IsAuthenticated">
      <summary>Gets the authentication status of the current user.</summary>
      <returns>true if the current user is logged in; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.IsConfirmed(System.String)">
      <summary>Returns a value that indicates whether the logged-in user has been confirmed by the provider.</summary>
      <returns>true if the user is confirmed; otherwise, false.</returns>
      <param name="userName">The user name.</param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.IsCurrentUser(System.String)">
      <summary>Returns a value that indicates whether the user name of the logged-in user matches the specified user name.</summary>
      <returns>true if the logged-in user name matches <paramref name="userName" />; otherwise, false.</returns>
      <param name="userName">The user name to compare the logged-in user name to.</param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.Login(System.String,System.String,System.Boolean)">
      <summary>Logs the user in.</summary>
      <returns>true if the user was logged in; otherwise false. </returns>
      <param name="userName">The user name.</param>
      <param name="password">The password for a user.</param>
      <param name="persistCookie">(Optional) true to specify that the authentication token in the cookie should be persisted beyond the current session; otherwise false. The default is false.</param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.Logout">
      <summary>Logs the user out.</summary>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.RequireAuthenticatedUser">
      <summary>If the user is not authenticated, sets the HTTP status to 401 (Unauthorized).</summary>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.RequireRoles(System.String[])">
      <summary>If the current user is not a member of one of the specified roles, sets the HTTP status code to 401 (Unauthorized).</summary>
      <param name="roles">The roles that are authorized to access a page.</param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.RequireUser(System.Int32)">
      <summary>If the current user does not match the specified user ID, sets the HTTP status to 401 (Unauthorized).</summary>
      <param name="userId">The ID of the user to compare.</param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.RequireUser(System.String)">
      <summary>If the current user does not match the specified user name, sets the HTTP status to 401 (Unauthorized).</summary>
      <param name="userName">The name of the user to compare.</param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.ResetPassword(System.String,System.String)">
      <summary>Changes a password.</summary>
      <returns>true if the password was changed; otherwise, false.</returns>
      <param name="passwordResetToken">A password reset token.</param>
      <param name="newPassword">The new password.</param>
    </member>
    <member name="M:WebMatrix.WebData.WebSecurity.UserExists(System.String)">
      <summary>Returns a value that indicates whether the specified user exists in the membership provider database.</summary>
      <returns>true if the membership provider found <paramref name="username" />; otherwise, false. </returns>
      <param name="userName">The user name.</param>
    </member>
  </members>
</doc>