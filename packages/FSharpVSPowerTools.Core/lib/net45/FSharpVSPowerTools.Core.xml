<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharpVSPowerTools.Core</name></assembly>
<members>
<member name="T:FSharpVSPowerTools.AllowStaleResults.No">
<summary>
 Don&apos;t allow stale results. This waits for all background changes relevant to the file to propagate, and forces a recheck of the file text
 regardless of whether if has been recently checked or not.
</summary>
</member>
<member name="T:FSharpVSPowerTools.AllowStaleResults.MatchingSource">
<summary>
 Allow checker results where the source matches but where the background builder may not have caught up yet after some other change
 (such as a saved change in an earlier file in the compilation order, or a saved change in a project or DLL this project depends on).

 This gives good, fast, accurate results for repeated requests to the same file text. Semantic responsiveness will be degraded
 during edition of the file.
</summary>
</member>
<member name="T:FSharpVSPowerTools.AllowStaleResults.MatchingFileName">
<summary>
 Allow checker results where the source doesn&apos;t even match
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharpVSPowerTools.CategorizedColumnSpan`1.Snapshot">
<summary>
 Snapshot for which the span was created.
 None if the right Snapshot is maintained separatly
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.DepthParser.GetRanges(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Compiler.SourceCodeServices.FSharpChecker})">
<summary>
 Get the &quot;nested ranges&quot; of source code structures, along with the minimum-number-of-indent spaces inside that span (ignoring comments and #commands).
 Note: The &apos;filename&apos; is only used e.g. to look at the filename extension (e.g. &quot;.fs&quot; versus &quot;.fsi&quot;), this does not try to load the file off disk.  
       Instead, &apos;sourceCodeOfTheFile&apos; should contain the entire file as a giant string.
</summary>
</member>
<member name="M:FSharpVSPowerTools.DepthParser.GetNonoverlappingDepthRanges(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Compiler.SourceCodeServices.FSharpChecker})">
<summary>
 Get non-overlapping ranges, where each range spans at most a single line, and has info about its &quot;semantic depth&quot;.
 Note: The &apos;filename&apos; is only used e.g. to look at the filename extension (e.g. &quot;.fs&quot; versus &quot;.fsi&quot;), this does not try to load the file off disk.  
       Instead, &apos;sourceCodeOfTheFile&apos; should contain the entire file as a giant string.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharpVSPowerTools.FSharpCompilerVersion.LatestKnown">
<summary>
 The current requested language version can be overriden by the user using environment variable.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.FSharpTargetFramework">
<summary>
 Target framework (used to find the right version of F# binaries)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.LanguageService.ParseAndCheckFileInProject(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpProjectOptions,System.String,System.String,FSharpVSPowerTools.AllowStaleResults)">
<summary>
 Parses and checks the given file in the given project under the given configuration. Asynchronously
 returns the results of checking the file.
</summary>
</member>
<member name="M:FSharpVSPowerTools.LanguageService.IsSymbolUsedInProjects(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpSymbol,System.String,System.Collections.Generic.IEnumerable{Microsoft.FSharp.Compiler.SourceCodeServices.FSharpProjectOptions},FSharpVSPowerTools.Profiler)">
<summary>
 Get all the uses in the project of a symbol in the given file (using &apos;source&apos; as the source for the file)
</summary>
</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.LanguageService.GetUsesOfSymbolInProjectAtLocationInFile(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpProjectOptions,System.Collections.Generic.IEnumerable{Microsoft.FSharp.Compiler.SourceCodeServices.FSharpProjectOptions},System.String,System.String,System.Int32,System.Int32,System.String,System.String[],Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int64}}},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.Unit}}}})">
<summary>
 Get all the uses in the project of a symbol in the given file (using &apos;source&apos; as the source for the file)
</summary>
</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.LanguageService.GetUsesOfSymbolAtLocationInFile(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpProjectOptions,System.String,System.String,System.Int32,System.Int32,System.String,System.String[],FSharpVSPowerTools.AllowStaleResults,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int64}}})">
<summary>
 Get all the uses of a symbol in the given file (using &apos;source&apos; as the source for the file)
</summary>
</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.LanguageService.GetScriptCheckerOptions(System.String,System.String,System.String,FSharpVSPowerTools.FSharpTargetFramework)">
<summary>
 Constructs options for the interactive checker for the given script file in the project under the given configuration. 
</summary>
</member>
<member name="M:FSharpVSPowerTools.LanguageService.GetProjectCheckerOptions(System.String,System.String[],System.String[],System.Tuple{System.String,Microsoft.FSharp.Compiler.SourceCodeServices.FSharpProjectOptions}[])">
<summary>
 Constructs options for the interactive checker for a project under the given configuration. 
</summary>
</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.LanguageService.GetCheckerOptions(System.String,System.String,System.String,System.String[],System.String[],System.Tuple{System.String,Microsoft.FSharp.Compiler.SourceCodeServices.FSharpProjectOptions}[],FSharpVSPowerTools.FSharpTargetFramework)">
<summary>
 Constructs options for the interactive checker for the given file in the project under the given configuration.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.LanguageService">
<summary>
 Provides functionality for working with the F# interactive checker running in background
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.MaybeBuilder">
<summary>
 Maybe computation expression builder, copied from ExtCore library
 https://github.com/jack-pappas/ExtCore/blob/master/ExtCore/Control.fs
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.ParseAndCheckResults">
<summary>
 Wraps the result of type-checking and provides methods for implementing
 various IntelliSense functions (such as completion &amp; tool tips). Provides default
 empty/negative results if information is missing.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharpVSPowerTools.RawEntity.CleanedIdents">
<summary>
 Entity name parts with removed module suffixes (Ns.M1Module.M2Module.M3.entity -&gt; Ns.M1.M2.M3.entity)
 and replaced compiled names with display names (FSharpEntity.DisplayName, FSharpValueOrFucntion.DisplayName).
 Note: *all* parts are cleaned, not the last one. 
</summary>
</member>
<member name="P:FSharpVSPowerTools.RawEntity.FullName">
<summary>
 Full entity name as it&apos;s seen in compiled code (raw FSharpEntity.FullName, FSharpValueOrFunction.FullName). 
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.XmlDocParser.GetXmlDocables(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Compiler.SourceCodeServices.FSharpChecker})">
<summary>
 Get the list of Xml documentation from current source code
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.XmlDocable">
<summary>
 Represent an Xml documentation block in source code
</summary>
</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.ArrayModule.heads``1(``0[])">
<summary>
 Returns all heads of a given array.
 For [|1;2;3|] it returns [|[|1; 2; 3|]; [|1; 2|]; [|1|]|]
</summary>
</member>
<member name="M:FSharpVSPowerTools.ArrayModule.replace``1(System.Int32,``0,``0[])">
<summary>
 Returns a new array with an element replaced with a given value.
</summary>
</member>
<member name="M:FSharpVSPowerTools.ArrayModule.endsWith``1(``0[],``0[])">
<summary>
 Returns true if one array has trailing elements equal to another&apos;s.
</summary>
</member>
<member name="M:FSharpVSPowerTools.ArrayModule.startsWith``1(``0[],``0[])">
<summary>
 Returns true if one array has another as its subset from index 0.
</summary>
</member>
<member name="T:FSharpVSPowerTools.ArrayModule">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.AssemblyContentProvider">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.AsyncMaybeModule">

</member>
<member name="M:FSharpVSPowerTools.AsyncModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Control.FSharpAsync{``0})">
<summary>
 Transforms an Async value using the specified function.
</summary>
</member>
<member name="M:FSharpVSPowerTools.AsyncModule.List.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Async implementation of List.map.
</summary>
</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.AsyncModule.List">

</member>
<member name="M:FSharpVSPowerTools.AsyncModule.Array.exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{System.Boolean}},``0[])">
<summary>
 Async implementation of Array.exists.
</summary>
</member>
<member name="M:FSharpVSPowerTools.AsyncModule.Array.mapi``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{``1}}},``0[])">
<summary>
 Async implementation of Array.mapi.
</summary>
</member>
<member name="M:FSharpVSPowerTools.AsyncModule.Array.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{``1}},``0[])">
<summary>
 Async implementation of Array.map.
</summary>
</member>
<member name="T:FSharpVSPowerTools.AsyncModule.Array">

</member>
<member name="T:FSharpVSPowerTools.AsyncModule">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.CodeGeneration.InterfaceData">
<summary>
 Capture information about an interface in ASTs
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.Context.DisplayContext">
<summary>
 Context in order to display types in the short form
</summary>
</member>
<member name="P:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.Context.MethodBody">
<summary>
 A list of lines represents skeleton of each member
</summary>
</member>
<member name="P:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.Context.ObjectIdent">
<summary>
 Object identifier of the interface e.g. &apos;x&apos;, &apos;this&apos;, &apos;__&apos;, etc.
</summary>
</member>
<member name="P:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.Context.Indentation">
<summary>
 Indentation inside method bodies
</summary>
</member>
<member name="P:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.Context.ArgInstantiations">
<summary>
 Data for interface instantiation
</summary>
</member>
<member name="P:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.Context.TypeInstantations">
<summary>
 Map generic types to specific instances for specialized interface implementation
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.tryFindInterfaceDeclaration(Microsoft.FSharp.Compiler.Range.pos,Microsoft.FSharp.Compiler.Ast.ParsedInput)">
<summary>
 Find corresponding interface declaration at a given position
</summary>
</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.formatInterface(System.Int32,System.Int32,System.String[],System.String,System.String,Microsoft.FSharp.Compiler.SourceCodeServices.FSharpDisplayContext,Microsoft.FSharp.Collections.FSharpSet{System.String},Microsoft.FSharp.Compiler.SourceCodeServices.FSharpEntity)">
<summary>
 Generate stub implementation of an interface at a start column
</summary>
</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.isInterface(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpEntity)">
<summary>
 Check whether an entity is an interface or type abbreviation of an interface
</summary>
</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.getImplementedMemberSignatures(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.String,Microsoft.FSharp.Compiler.Range.range},Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Compiler.SourceCodeServices.FSharpSymbolUse}}},Microsoft.FSharp.Compiler.SourceCodeServices.FSharpDisplayContext,FSharpVSPowerTools.CodeGeneration.InterfaceData)">
<summary>
 Ideally this info should be returned in error symbols from FCS. 
 Because it isn&apos;t, we implement a crude way of getting member signatures:
  (1) Crack ASTs to get member names and their associated ranges
  (2) Check symbols of those members based on ranges
  (3) If any symbol found, capture its member signature 
</summary>
</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.getMemberNameAndRanges(FSharpVSPowerTools.CodeGeneration.InterfaceData)">
<summary>
 Get associated member names and ranges
 In case of properties, intrinsic ranges might not be correct for the purpose of getting
 positions of &apos;member&apos;, which indicate the indentation for generating new members
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.hasNoInterfaceMember(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpEntity)">
<summary>
 Check whether an interface is empty
</summary>
</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.getInterfaceMembers(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpEntity)">
<summary>
 Get members in the decreasing order of inheritance chain
</summary>
</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.getInterfaces(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpEntity)">
<summary>
 Filter out duplicated interfaces in inheritance chain
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator.normalizePropertyName(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpMemberOrFunctionOrValue)">
<summary>
 Convert a getter/setter to its canonical form
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.CodeGeneration.InterfaceStubGenerator">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharpVSPowerTools.CodeGeneration.RecordStubGenerator.Context.FieldDefaultValue">
<summary>
 A single-line skeleton for each field
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.CodeGeneration.RecordStubGenerator.PositionKind.AfterLastField">
<summary>
 let x = { Field1 = expr&lt;insert-here&gt; }
</summary>
</member>
<member name="T:FSharpVSPowerTools.CodeGeneration.RecordStubGenerator.PositionKind.AfterCopyExpression">
<summary>
 let y = { x with&lt;insert-here&gt; }
</summary>
</member>
<member name="T:FSharpVSPowerTools.CodeGeneration.RecordStubGenerator.PositionKind.AfterLeftBrace">
<summary>
 let record = {&lt;insert-here&gt;}
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.CodeGeneration.RecordStubGenerator">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharpVSPowerTools.CodeGeneration.SignatureGenerator.Context.ResolvingOpenDeclarations">
<summary>
 Relevant open declarations that needs resolving
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharpVSPowerTools.CodeGeneration.SignatureGenerator.Context.OpenDeclWriter">
<summary>
 A temporary writer to store resolved open declarations
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.SignatureGenerator.getFileNameFromSymbol(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpSymbol)">
<summary>
 Get file name from symbol&apos;s full name and escape illegal characters
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.SignatureGenerator.writeTypeHeader(FSharpVSPowerTools.CodeGeneration.SignatureGenerator.Context,Microsoft.FSharp.Compiler.SourceCodeServices.FSharpEntity)">
<summary>
 Write open declarations to a separate buffer.
 It supposes to be called after all internal details have been written.
</summary>
</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.SignatureGenerator.writeModuleHeader(FSharpVSPowerTools.CodeGeneration.SignatureGenerator.Context,Microsoft.FSharp.Compiler.SourceCodeServices.FSharpEntity)">
<summary>
 Write open declarations, XmlDoc and attributes of modules to a separate buffer.
 It supposes to be called after all internal details have been written.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.SignatureGenerator.formatType(FSharpVSPowerTools.CodeGeneration.SignatureGenerator.Context,Microsoft.FSharp.Compiler.SourceCodeServices.FSharpType)">
<summary>
 Work around an FCS bug where:
  &apos;List&lt;&apos;T&gt;.Enumerator&apos; is formatted as &apos;List`1.Enumerator&lt;&apos;T&gt;&apos;
  &apos;Dictionary&lt;&apos;TKey,&apos;TValue&gt;.Enumerator&apos; is formatted as &apos;Dictionary`2.Enumerator&lt;&apos;TKey,&apos;TValue&gt;&apos;
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.CodeGeneration.SignatureGenerator">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharpVSPowerTools.CodeGeneration.UnionPatternMatchCaseGenerator.Context.CaseDefaultValue">
<summary>
 A single-line skeleton for each case
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharpVSPowerTools.CodeGeneration.UnionPatternMatchCaseGenerator.PatternMatchExpr.Expr">
<summary>
 The whole pattern match expression
</summary>
</member>
<member name="P:FSharpVSPowerTools.CodeGeneration.UnionPatternMatchCaseGenerator.PatternMatchExpr.MatchWithOrFunctionRange">
<summary>
 Range of &apos;match x with&apos; or &apos;function&apos;
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.CodeGeneration.UnionPatternMatchCaseGenerator">

</member>
<member name="T:FSharpVSPowerTools.CodeGeneration.Utils.NamesWithIndices">
<summary>
 Represent environment where a captured identifier should be renamed
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.CodeGeneration.Utils.normalizeArgName(Microsoft.FSharp.Collections.FSharpMap{System.String,Microsoft.FSharp.Collections.FSharpSet{System.Int32}},System.String)">
<summary>
 Rename a given argument if the identifier has been used
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.CodeGeneration.Utils">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.DepthParsing">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.EntityModule">

</member>
<member name="P:FSharpVSPowerTools.Environment.runningOnMono">
<summary>
 Are we running on the Mono platform?
</summary>
</member>
<member name="T:FSharpVSPowerTools.Environment">

</member>
<member name="M:FSharpVSPowerTools.FSharpEnvironment.resolveAssembly(Microsoft.FSharp.Collections.FSharpList{System.String},System.String)">
<summary>
 Resolve assembly in the specified list of directories
</summary>
</member>
<member name="M:FSharpVSPowerTools.FSharpEnvironment.getDefaultDirectories(FSharpVSPowerTools.FSharpCompilerVersion,FSharpVSPowerTools.FSharpTargetFramework)">
<summary>
 Returns default directories to be used when searching for DLL files
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.FSharpEnvironment.tryFsharpiScript(System.String)">
<summary>
 Try to find the F# compiler location by looking at the &quot;fsharpi&quot; script installed by F# packages
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.FSharpEnvironment.Option.ofString(System.String)">
<summary>
 Convert string into Option string where null and String.Empty result in None
</summary>
</member>
<member name="T:FSharpVSPowerTools.FSharpEnvironment.Option">

</member>
<member name="T:FSharpVSPowerTools.FSharpEnvironment">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.IdentifierUtils.encapsulateIdentifier(FSharpVSPowerTools.SymbolKind,System.String)">
<summary>
 Encapsulates identifiers for rename operations if needed
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.IdentifierUtils">

</member>
<member name="M:FSharpVSPowerTools.InsertContextModule.insertOpenDeclaration``1(``0,FSharpVSPowerTools.IInsertContextDocument{``0},FSharpVSPowerTools.InsertContext,System.String)">
 <summary>
 Inserts open declaration into abstract document. 
 </summary>
 <param name="state">Abstract state which is changed after a line is inserted into the document. 
 This is ITestSnapshot for VS, for example.</param>
 <param name="doc">Document.</param>
 <param name="ctx">Insertion context. Typically returned from tryGetInsertionContext</param>
 <param name="ns">Namespace to open.</param>
</member>
<member name="M:FSharpVSPowerTools.InsertContextModule.adjustInsertionPoint``1(``0,FSharpVSPowerTools.IInsertContextDocument{``0},FSharpVSPowerTools.InsertContext)">
<summary>
 Corrects insertion line number based on kind of scope and text surrounding the instertion point.
</summary>
</member>
<member name="T:FSharpVSPowerTools.InsertContextModule">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.Lexer.tokenizeLine``2(``0,System.String[],``1,System.String,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Core.FSharpFunc{``1,System.Int64}}})">
<summary>
 Return all tokens of current line
</summary>
</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.Lexer.getLexStates(Microsoft.FSharp.Collections.FSharpList{System.String},System.String)">
<summary>
 Get the array of all lex states in current source
</summary>
</member>
<member name="T:FSharpVSPowerTools.Lexer">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.List">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.Navigation.Index">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.Navigation.NavigableItemsCollector">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.OpenDeclWithAutoOpensModule">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.OpenDeclarationGetter">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.OpenDeclarationModule">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.OperatorCategorizer">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.OptionModule.flatten``1(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpOption{``0}})">
<summary>
 Some(Some x) -&gt; Some x | None -&gt; None
</summary>
</member>
<member name="M:FSharpVSPowerTools.OptionModule.orTry``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.FSharpOption{``0}},Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 Gets the option if Some x, otherwise try to get another value
</summary>
</member>
<member name="M:FSharpVSPowerTools.OptionModule.getOrTry``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 Gets the value if Some x, otherwise try to get another value by calling a function
</summary>
</member>
<member name="M:FSharpVSPowerTools.OptionModule.orElse``1(Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 Gets the option if Some x, otherwise the supplied default value.
</summary>
</member>
<member name="M:FSharpVSPowerTools.OptionModule.getOrElse``1(``0,Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 Gets the value associated with the option or the supplied default value.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.OptionModule">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.ParsedInput">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.PervasiveModule.op_LessDivideGreater(System.String,System.String)">
<summary>
 Path.Combine
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.PervasiveModule.fakeDateTimeRepresentingTimeLoaded``1(``0)">
<summary>
 Load times used to reset type checking properly on script/project load/unload. It just has to be unique for each project load/reload.
 Not yet sure if this works for scripts.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.PervasiveModule">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.QuotationCategorizer">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.Reflection">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.SeqModule">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.SourceCodeClassifier">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.StringCategorizers.EscapedChars">

</member>
<member name="T:FSharpVSPowerTools.StringCategorizers">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.StringModule">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.TaskList.CommentExtractor">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.TaskList.Utils">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.TypedAstExtensionHelpers">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.TypedAstPatterns.|Constructor|_|(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpMemberOrFunctionOrValue)">
<summary>
 Constructor (enclosingEntity)
</summary>
</member>
<member name="M:FSharpVSPowerTools.TypedAstPatterns.|MemberFunctionOrValue|_|(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpSymbol)">
<summary>
 Func (memberFunctionOrValue, fullType)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.TypedAstPatterns.|Entity|_|(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpSymbol)">
<summary>
 Entity (originalEntity, abbreviatedEntity, abbreviatedType)
</summary>
</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.TypedAstPatterns.|Field|_|(Microsoft.FSharp.Compiler.SourceCodeServices.FSharpSymbol)">
<summary>
 Field (field, fieldAbbreviatedType)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.TypedAstPatterns">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.TypedAstUtils">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.UntypedAstUtils.getModuleOrNamespacePath(Microsoft.FSharp.Compiler.Range.pos,Microsoft.FSharp.Compiler.Ast.ParsedInput)">
<summary>
 Get path to containing module/namespace of a given position
</summary>
</member>
<member name="M:FSharpVSPowerTools.UntypedAstUtils.getStringLiterals(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Compiler.Ast.ParsedInput})">
<summary>
 Returns all string literal ranges
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.UntypedAstUtils.getQuatationRanges(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Compiler.Ast.ParsedInput})">
<summary>
 Returns ranges of all quotations found in an untyped AST
</summary>
</member>
<member name="">

</member>
<member name="M:FSharpVSPowerTools.UntypedAstUtils.getLongIdents(Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Compiler.Ast.ParsedInput})">
<summary>
 Returns all Idents and LongIdents found in an untyped AST.
</summary>
</member>
<member name="M:FSharpVSPowerTools.UntypedAstUtils.|Sequentials|_|(Microsoft.FSharp.Compiler.Ast.SynExpr)">
<summary>
 An recursive pattern that collect all sequential expressions to avoid StackOverflowException
</summary>
</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.UntypedAstUtils">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.UnusedDeclarations">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.XmlDocComment">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharpVSPowerTools.XmlDocParsing">

</member>
<member name="">

</member>
<member name="T:System.AssemblyVersionInformation">

</member>
</members>
</doc>
